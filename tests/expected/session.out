-- Install core dependencies
\ir ../../sql/00_install.sql
CREATE EXTENSION IF NOT EXISTS pgcrypto;
\ir ../../sql/60_pgb_session.sql
CREATE SCHEMA IF NOT EXISTS pgb_session;
CREATE TABLE IF NOT EXISTS pgb_session.session (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    current_url TEXT NOT NULL CONSTRAINT session_current_url_check CHECK (current_url ~* '^(pgb|https?)://'),
    state JSONB NOT NULL DEFAULT '{}'::jsonb,
    focus UUID
);
CREATE TABLE IF NOT EXISTS pgb_session.history (
    session_id UUID NOT NULL REFERENCES pgb_session.session(id) ON DELETE CASCADE,
    n BIGINT GENERATED BY DEFAULT AS IDENTITY,
    url TEXT NOT NULL,
    ts TIMESTAMPTZ NOT NULL DEFAULT now(),
    PRIMARY KEY(session_id, n)
);
CREATE TABLE IF NOT EXISTS pgb_session.snapshot (
    session_id UUID NOT NULL REFERENCES pgb_session.session(id) ON DELETE CASCADE,
    ts TIMESTAMPTZ NOT NULL DEFAULT now(),
    state JSONB NOT NULL,
    current_url TEXT NOT NULL,
    PRIMARY KEY(session_id, ts)
);
CREATE OR REPLACE FUNCTION pgb_session.open(p_url TEXT)
RETURNS UUID
LANGUAGE plpgsql
AS $$
DECLARE
    sid UUID;
BEGIN
    IF p_url IS NULL OR p_url = '' THEN
        RAISE EXCEPTION 'url must not be empty';
    END IF;

    IF p_url !~* '^(pgb|https?)://' THEN
        RAISE EXCEPTION 'unsupported URL scheme: %', p_url;
    END IF;

    INSERT INTO pgb_session.session(current_url)
    VALUES (p_url)
    RETURNING id INTO sid;

    INSERT INTO pgb_session.history(session_id, url)
    VALUES (sid, p_url);

    RETURN sid;
END;
$$;
COMMENT ON FUNCTION pgb_session.open(p_url TEXT) IS
    'Open a new session. Parameters: p_url - initial URL. Returns: session UUID.';
CREATE OR REPLACE FUNCTION pgb_session.navigate(p_session_id UUID, p_url TEXT)
RETURNS VOID
LANGUAGE plpgsql
AS $$
DECLARE
    next_n BIGINT;
BEGIN
    IF p_url IS NULL OR p_url = '' THEN
        RAISE EXCEPTION 'url must not be empty';
    END IF;

    IF p_url !~* '^(pgb|https?)://' THEN
        RAISE EXCEPTION 'unsupported URL scheme: %', p_url;
    END IF;

    UPDATE pgb_session.session
    SET current_url = p_url
    WHERE id = p_session_id;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'session % not found', p_session_id
            USING ERRCODE = 'PGBSN';
    END IF;

    SELECT COALESCE(max(n), 0) + 1
    INTO next_n
    FROM pgb_session.history
    WHERE session_id = p_session_id;

    INSERT INTO pgb_session.history(session_id, n, url)
    VALUES (p_session_id, next_n, p_url);
END;
$$;
COMMENT ON FUNCTION pgb_session.navigate(p_session_id UUID, p_url TEXT) IS
    'Navigate to a new URL. Parameters: p_session_id - session ID; p_url - destination URL. Returns: void.';
\ir 60_pgb_session_reload.sql
CREATE OR REPLACE FUNCTION pgb_session.reload(p_session_id UUID)
RETURNS VOID
LANGUAGE plpgsql
AS $$
DECLARE
    v_url TEXT;
    next_n BIGINT;
BEGIN
    SELECT current_url INTO v_url
    FROM pgb_session.session
    WHERE id = p_session_id
    FOR UPDATE;

    IF v_url IS NULL THEN
        RAISE EXCEPTION 'session % not found', p_session_id
            USING ERRCODE = 'PGBSN';
    END IF;

    SELECT COALESCE(max(n), 0) + 1
    INTO next_n
    FROM pgb_session.history
    WHERE session_id = p_session_id;

    INSERT INTO pgb_session.history(session_id, n, url)
    VALUES (p_session_id, next_n, v_url);
END;
$$;
COMMENT ON FUNCTION pgb_session.reload(p_session_id UUID) IS
    'Record a reload event. Parameters: p_session_id - session ID. Returns: void.';
CREATE OR REPLACE FUNCTION pgb_session.replay(p_session_id UUID, p_ts TIMESTAMPTZ)
RETURNS VOID
LANGUAGE plpgsql
AS $$
DECLARE
    v_state JSONB;
    v_url TEXT;
    v_snap_ts TIMESTAMPTZ;
BEGIN
    SELECT state, current_url, ts
    INTO v_state, v_url, v_snap_ts
    FROM pgb_session.snapshot
    WHERE session_id = p_session_id
      AND ts <= p_ts
    ORDER BY ts DESC
    LIMIT 1;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'snapshot not found for session % at %', p_session_id, p_ts
            USING ERRCODE = 'PGBSN';
    END IF;

    UPDATE pgb_session.session
    SET state = v_state,
        current_url = v_url
    WHERE id = p_session_id;

    DELETE FROM pgb_session.history
    WHERE session_id = p_session_id
      AND ts > v_snap_ts;
END;
$$;
COMMENT ON FUNCTION pgb_session.replay(p_session_id UUID, p_ts TIMESTAMPTZ) IS
    'Rewind a session to a snapshot at or before p_ts. Parameters: p_session_id - session ID; p_ts - target timestamp. Example usage: SELECT pgb_session.replay(:session_id, ''2025-08-04T15:30:00Z''::timestamptz); Returns: void.';
CREATE OR REPLACE FUNCTION pgb_session.close(p_session_id UUID)
RETURNS VOID
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM pgb_session.session
    WHERE id = p_session_id;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'session % not found', p_session_id
            USING ERRCODE = 'PGBSN';
    END IF;
END;
$$;
COMMENT ON FUNCTION pgb_session.close(p_session_id UUID) IS
    'Close a session and remove all associated data. Parameters: p_session_id - session ID. Returns: void.';
SET TIME ZONE 'UTC';
SET datestyle TO ISO, YMD;
-- Open a new session and capture the ID
SELECT pgb_session.open('pgb://local/demo') AS sid \gset
-- Ensure an ID is returned
SELECT :'sid' IS NOT NULL AS opened;
 opened 
--------
 t
(1 row)

-- Reload the session
SELECT pgb_session.reload(:'sid');
 reload 
--------
 
(1 row)

-- Verify session table has one row
SELECT count(*) AS session_count FROM pgb_session.session;
 session_count 
---------------
             1
(1 row)

-- Verify history table has two entries
SELECT count(*) AS history_count FROM pgb_session.history;
 history_count 
---------------
             2
(1 row)

-- Navigate to new URLs within the session
SELECT pgb_session.navigate(:'sid', 'http://example.com');
 navigate 
----------
 
(1 row)

SELECT pgb_session.navigate(:'sid', 'https://example.org');
 navigate 
----------
 
(1 row)

-- Verify current_url updated
SELECT current_url = 'https://example.org' AS navigated
FROM pgb_session.session WHERE id = :'sid';
 navigated 
-----------
 t
(1 row)

-- Verify history table has four entries for the session
SELECT count(*) AS history_count_after_nav FROM pgb_session.history WHERE session_id = :'sid';
 history_count_after_nav 
-------------------------
                       4
(1 row)

-- Reject invalid URL scheme on navigate
SELECT pgb_session.navigate(:'sid', 'ftp://example.com');
ERROR:  unsupported URL scheme: ftp://example.com
CONTEXT:  PL/pgSQL function pgb_session.navigate(uuid,text) line 10 at RAISE
-- Close the session
SELECT pgb_session.close(:'sid');
 close 
-------
 
(1 row)

-- Verify session and history cleared
SELECT count(*) AS session_count_after_close FROM pgb_session.session;
 session_count_after_close 
---------------------------
                         0
(1 row)

SELECT count(*) AS history_count_after_close FROM pgb_session.history;
 history_count_after_close 
---------------------------
                         0
(1 row)

-- Accept valid URL schemes
SELECT pgb_session.open('http://example.com') IS NOT NULL AS http_opened;
 http_opened 
-------------
 t
(1 row)

SELECT pgb_session.open('https://example.com') IS NOT NULL AS https_opened;
 https_opened 
--------------
 t
(1 row)

-- Accept uppercase URL schemes
SELECT pgb_session.open('HTTP://example.com') IS NOT NULL AS http_upper_opened;
 http_upper_opened 
-------------------
 t
(1 row)

SELECT pgb_session.open('HTTPS://example.com') IS NOT NULL AS https_upper_opened;
 https_upper_opened 
--------------------
 t
(1 row)

-- Reject invalid URL scheme
SELECT pgb_session.open('ftp://example.com');
ERROR:  unsupported URL scheme: ftp://example.com
CONTEXT:  PL/pgSQL function pgb_session.open(text) line 10 at RAISE
-- Reject invalid URL scheme on direct insert
INSERT INTO pgb_session.session(id, created_at, current_url)
VALUES ('00000000-0000-0000-0000-000000000000', '2000-01-01 00:00:00+00', 'ftp://example.com');
ERROR:  new row for relation "session" violates check constraint "session_current_url_check"
DETAIL:  Failing row contains (00000000-0000-0000-0000-000000000000, 2000-01-01 00:00:00+00, ftp://example.com, {}, null).
-- Ensure empty URL raises an exception
SELECT pgb_session.open('');
ERROR:  url must not be empty
CONTEXT:  PL/pgSQL function pgb_session.open(text) line 6 at RAISE
