-- Test concurrent reloads to ensure unique history entries
CREATE EXTENSION IF NOT EXISTS dblink;
-- Open a new session and capture the ID
SELECT pgb_session.open('pgb://local/demo') AS sid \gset
-- Establish two connections for concurrent reloads
SELECT dblink_connect('c1', 'dbname=' || current_database());
 dblink_connect 
----------------
 OK
(1 row)

SELECT dblink_connect('c2', 'dbname=' || current_database());
 dblink_connect 
----------------
 OK
(1 row)

-- Launch reloads concurrently
SELECT dblink_send_query('c1', format('SELECT pgb_session.reload(''%s'')', :'sid'));
 dblink_send_query 
-------------------
                 1
(1 row)

SELECT dblink_send_query('c2', format('SELECT pgb_session.reload(''%s'')', :'sid'));
 dblink_send_query 
-------------------
                 1
(1 row)

-- Wait for both reloads to complete
SELECT * FROM dblink_get_result('c1') AS t(result text);
 result 
--------
 
(1 row)

SELECT * FROM dblink_get_result('c2') AS t(result text);
 result 
--------
 
(1 row)

-- Verify history sequence numbers are unique and sequential
SELECT array_agg(n - min_n ORDER BY n) AS ns
FROM (
    SELECT n, min(n) OVER () AS min_n
    FROM pgb_session.history
    WHERE session_id = :'sid'
) s;
   ns
---------
 {0,1,2}
(1 row)

-- Verify snapshots recorded for each reload (plus initial)
SELECT count(*) = 3 AS snapshot_count
FROM pgb_session.snapshot WHERE session_id = :'sid';
 snapshot_count
---------------
 t
(1 row)

-- Simulate a navigation in progress and ensure reload waits for it
SELECT dblink_exec('c1', 'BEGIN');
 dblink_exec
-------------
 BEGIN
(1 row)

SELECT dblink_exec('c1', format(
    'SELECT pgb_session.navigate(''%s'', ''pgb://local/concurrent'')',
    :'sid'
));
      dblink_exec
----------------------
 SELECT 1
(1 row)

SELECT dblink_send_query('c2', format('SELECT pgb_session.reload(''%s'')', :'sid'));
 dblink_send_query
-------------------
                 1
(1 row)

SELECT dblink_is_busy('c2') AS reload_waiting;
 reload_waiting
----------------
 t
(1 row)

SELECT dblink_exec('c1', 'COMMIT');
 dblink_exec
-------------
 COMMIT
(1 row)

SELECT * FROM dblink_get_result('c2') AS t(result text);
 result
--------

(1 row)

SELECT url = 'pgb://local/concurrent' AS reload_used_committed_url
FROM pgb_session.history
WHERE session_id = :'sid'
ORDER BY n DESC
LIMIT 1;
 reload_used_committed_url
---------------------------
 t
(1 row)

SELECT dblink_disconnect('c1');
 dblink_disconnect
-------------------
 OK
(1 row)

SELECT dblink_disconnect('c2');
 dblink_disconnect 
-------------------
 OK
(1 row)

